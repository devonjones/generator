#!/usr/bin/env python
import json
import sys

from optparse import OptionParser
from collections import Counter
from town_names.meaning import load_meanings
from town_names.name import load_names

def deconstruct_names(names, word_db):
	retval = []
	counter = 0
	uncounted = 0
	word_names = 0
	word_saints = 0
	for name in names:
		name.find_meaning(word_db)
		if name.has_name():
			word_names += 1
		if name.has_saint():
			word_saints += 1
		if name.count_unaccounted() == 0:
			counter += 1
			retval.append(name)
		else:
			uncounted += 1
	print("Perfect: %s, names: %s, saints: %s, total: %s" % (counter, word_names, word_saints, len(names)), file=sys.stderr)
	return retval

def set_proportions(names):
	part_proportions = Counter()
	lone_proportions = Counter()
	struct_proportions = Counter()
	for name in names:
		for u in name.get_samples():
			part_proportions[u] += 1
		for u in name.get_lone_samples():
			lone_proportions[u] += 1
		for structure in name.get_structure():
			struct_proportions[structure] += 1
	return {'usages': part_proportions, 'single_usages': lone_proportions, 'structures': encode_structs(struct_proportions)}

def encode_structs(struct):
	structs = []
	for key, value in struct.items():
		newstruct = {"proportion": value}
		words = []
		for word in key:
			w = []
			for meaning in word:
				m = {}
				for quality in meaning:
					if quality in ['pre', 'post', 'inner']:
						m["location"] = quality
					else:
						m[quality] = True
				w.append(m)
			words.append(w)
		newstruct["words"] = words
		structs.append(newstruct)
	return structs

def option_parser():
	usage = "usage: %prog"
	parser = OptionParser(usage=usage)
	return parser

# Program will take in town names and meanings and generate the proportions of actual parts of name structures
def main():
	parser = option_parser()
	(options, args) = parser.parse_args()
	names = json.load(open(args[0]))
	parts = json.load(open(args[1]))
	names = load_names(names)
	word_db, _ = load_meanings(parts)
	good_names = deconstruct_names(names, word_db)
	proportions = set_proportions(good_names)
	print(json.dumps(proportions, indent=2))

if __name__ == '__main__':
	main()

